\include "./commonRules.key";

/*
    alice = new Person();
    alice.balance = 20;
    alice.account.balance = 10;
    return alice.age;
*/

\functions {
    \unique Field balance;
    \unique Field account;

    \unique IdentityPrim ca;

    Identity aliceAcc;
}

\programVariables {
    Memory mem;
    Identity alice;
    int v;
}

\rules {
    aliceAccDef {
        \find(aliceAcc)
        \replacewith(idC(ca, cons1(account)))
        \heuristics(concrete)
    };

    accNotPrimitive {
        \find(isPrimitive(account))
        \replacewith(false)
        \heuristics(concrete)
    };
}

\problem {
    { mem := addM(mem, ca) }
        {alice := idC(ca, cons1(account)) }
        { mem := write(mem, alice, balance, 20) }
            { mem := write(mem, Identity::read(mem, alice, account), balance, 10) }
                { v := int::read(mem, alice, balance) }
                    (v = 20)
}
