\sorts {
    Memory;
    java.lang.Identity \extends java.lang.Object;
    IdentityPrim;
    Field;

	\generic alpha \extends any;

	Struct \extends any;
	List;
}


\functions{
    // Core
    \unique List nil;
    \unique List cons(any, List);
    List consr(List, any);

    alpha alpha::head(List);
    List tail(List);

    List firsts(List);
    alpha alpha::last(List);

    // Memory
    \unique Memory mtMem;

    Memory write(Memory, Identity, Field, any);
    Memory addM(Memory, IdentityPrim);
    alpha alpha::read(Memory, Identity, Field);
    alpha alpha::readR(Memory, Identity, List);

    \unique Identity idC(IdentityPrim, List);
    Identity idCC(IdentityPrim);
    any default(Identity, Field);
    any defaultF(Field);

    // Storage
    \unique Struct mtSt;

    Struct storeSt(Struct, Field, any);
    Struct save(Struct, List, any);
    alpha alpha::selectSt(Struct, Field);
    alpha alpha::find(Struct, List);

    \unique Field size;

    // Memory to Storage
    Struct copyMem(Struct, Memory, Identity);

    // Storage to Memory
    Memory copySt(Memory, IdentityPrim, any);

    // Helpers
    List cons1(any);
    List cons2(any, any);
    List cons3(any, any, any);
}

\predicates {
    new(Memory, IdentityPrim);
    isPrimitive(Field);
    sizeLE1(List);
    isEmpty(List);
}

\schemaVariables{
    \term Memory mem;
    \term Identity id, id1, id2;
    \term IdentityPrim idp, idp1, idp2;
    \term Field fld, fld1, fld2;
    \term List fxs, flds, xs;
    \term any x, y, z, v, v0, v1;
    \term Memory mem;
    \term Struct st;
}

\programVariables {
}

\rules {
    // Core
    headDefinition {
        \find(alpha::head(cons(x, xs)))
        \replacewith(x)
        \heuristics(simplify)
    };

    tailDefinition {
        \find(tail(cons(x, xs)))
        \replacewith(xs)
        \heuristics(simplify)
    };

    lastConsNil {
        \find(alpha::last(cons(x, nil)))
        \replacewith(x)
        \heuristics(simplify)
    };

    lastConsRest {
        \find(alpha::last(cons(x, cons(y, xs))))
        \replacewith(alpha::last(cons(y, xs)))
        \heuristics(simplify)
    };

    firstsConsNil {
        \find(firsts(cons(x, nil)))
        \replacewith(nil)
        \heuristics(simplify)
    };

    firstsConsRest {
        \find(firsts(cons(x, cons(y, xs))))
        \replacewith(cons(x, firsts(cons(y, xs))))
        \heuristics(simplify)
    };

    isEmptyEmpty {
        \find(isEmpty(nil))
        \replacewith(true)
        \heuristics(concrete)
    };

    isEmptyCons {
        \find(isEmpty(cons(x, xs)))
        \replacewith(false)
        \heuristics(concrete)
    };

    sizeLE1Empty {
        \find(sizeLE1(nil))
        \replacewith(true)
        \heuristics(concrete)
    };

    sizeLE1Cons {
        \find(sizeLE1(cons(x, nil)))
        \replacewith(true)
        \heuristics(concrete)
    };

    sizeLE1ConsCons {
        \find(sizeLE1(cons(x, cons(y, xs))))
        \replacewith(false)
        \heuristics(concrete)
    };

    consREmpty {
        \find(consr(nil, x))
        \replacewith(cons(x,nil))
        \heuristics(simplify)
    };

    consRcons {
        \find(consr(cons(x, xs), y))
        \replacewith(cons(x, consr(xs, y)))
        \heuristics(simplify)
    };

    // Auxiliary
    defaultDef {
        \find(default(idC(idp, flds), fld))
        \replacewith(
            \if(isPrimitive(fld))
            \then(defaultF(fld))
            \else(idC(idp, consr(flds,fld)))
        )
        \heuristics(simplify)
    };

    idCCDef {
        \find(idCC(idp))
        \replacewith(idC(idp, nil))
        \heuristics(concrete)
    };

    // Memory
    readOnWrite {
        \find(alpha::read(write(mem, id1, fld1, v), id2, fld2))
        \replacewith( \if ( id1 = id2 & fld1 = fld2)
                      \then (v)
                      \else (alpha::read(mem, id2, fld2))
                    )
        \heuristics(simplify_enlarging)
    };

    readOnAddM {
        \find(alpha::read(addM(mem, idp1), idC(idp2, flds), fld))
            \replacewith(
                \if (idp1 = idp2) \then (
                        default(idC(idp2, flds), fld)
                ) \else (
                        alpha::read(mem, idC(idp2, flds), fld)
                )
        )
        \heuristics(simplify_enlarging)
    };

    readFromEmptyMemory {
        \find(alpha::read(mtMem, id, fld))
        \replacewith(default(id, fld))
        \heuristics(simplify)
    };

    readREmpty {
        \find(alpha::readR(mem, id, cons(fld, nil)))
        \replacewith( alpha::read(mem, id, fld) )
        \heuristics(simplify)
    };

    readRCons {
        \find(alpha::readR(mem, id, cons(fld1, cons(fld2, flds))))
        \replacewith(
            alpha::read(mem, Identity::readR(mem, id, firsts(cons(fld1, cons(fld2, flds)))),
               Field::last(cons(fld1, cons(fld2, flds))))
        )
        \heuristics(simplify)
    };

    newFromAdd {
        \find(new(addM(mem, idp1), idp2))
        \replacewith(
            \if (idp1 = idp2)
            \then (false)
            \else (new(mem, idp2))
        )
        \heuristics(simplify_enlarging)
    };

    newFromWrite {
        \find(new(write(mem, id1, fld1, v), idp2))
        \replacewith(new(mem, idp2))
        \heuristics(simplify_enlarging)
    };

    newFromEmptyMemory {
        \find(new(mtMem, idp1))
        \replacewith(true)
        \heuristics(simplify_enlarging)
    };

    // Storage
    selectOnStore {
        \find(alpha::selectSt(storeSt(st, fld1, v), fld2))
        \replacewith(
            \if (fld1 = fld2)
            \then (v)
            \else (alpha::selectSt(st,fld2))
        )
        \heuristics(simplify_enlarging)
    };

    selectOnEmptyStorage {
        \find(alpha::selectSt(mtSt, fld))
        \replacewith(alpha::defaultF(fld) )
        \heuristics(simplify_enlarging)
    };

    saveOnEmptyStorageEmpty {
        \find(save(mtSt, nil, v))
        \replacewith(v)
        \heuristics(simplify_enlarging)
    };

    saveOnEmptyStorage {
        \find(save(mtSt,cons(fld, flds), v))
        \replacewith( storeSt(mtSt, fld, save(mtSt, flds, v)) )
        \heuristics(simplify_enlarging)
    };

    saveOnStoreEmpty {
        \find(save(storeSt(st, fld, v0), nil, v1))
        \replacewith(v1)
        \heuristics(simplify_enlarging)
    };

    saveOnStoreCons {
        \find(save(storeSt(st, fld1, v0), cons(fld2, flds), v1))
        \replacewith(
            \if (fld1 = fld2)
            \then ( storeSt(st, fld1,
                \if ( isEmpty(flds) )
                \then ( v1 )
                \else ( save( (Struct)v0, flds, v1) )
            ))
            \else ( storeSt(save(st, flds, v1), fld1, v0) )
        )
        \heuristics(simplify_enlarging)
    };

    findDefinitionEmpty {
        \find(alpha::find(st, nil))
        \replacewith( (alpha) st )
        \heuristics(simplify_enlarging)
    };

    findDefinitionCons {
        \find(alpha::find(st, cons(fld, flds)))
        \replacewith(
            \if(isEmpty(flds))
            \then( alpha::selectSt(st, fld) )
            \else( alpha::find(Struct::selectSt(st, fld), flds) )
        )
        \heuristics(simplify_enlarging)
    };

    // lazy
    saveOnEmpty {
        \find(save(st, nil, v))
        \replacewith(v)
        \heuristics(simplify)
    };

    selectOnSaveEmpty {
        \find(alpha::selectSt(save(st,nil,v), fld))
        \replacewith(alpha::selectSt(save(st,flds,v), fld))
        \heuristics(simplify)
    };

    selectOnSaveCons {
        \find(alpha::selectSt(save(st,cons(fld1, flds),v), fld2))
        \replacewith(
            \if(fld1 = fld2)
            \then( (alpha) save(Struct::selectSt(st,fld1), flds, v) )
            \else( alpha::selectSt(st, fld2) )
        )
        \heuristics(simplify)
    };

    // Memory To Storage

    findOnCopy {
        \find(alpha::find(copyMem(st, mem, id), flds))
        \replacewith(
            \if (!isEmpty(flds) & isPrimitive(Field::last(flds)))
            \then (alpha::readR(mem, id, flds))
            \else (alpha::find(copyMem(st, mem, id), flds))
        )
        \heuristics(simplify_enlarging)
    };

    // Storage to Memory

    readFromCopyToStorage {
        \find( alpha::read(copySt(mem, idp1, st), idC(idp2, fxs), fld) )
        \replacewith (
            \if (idp1 = idp2)
            \then (
                \if ( isPrimitive(fld) )
                \then ( alpha::find(st, consr(fxs, fld)) )
                \else ( idC(idp1, consr(fxs, fld)) )
            )
            \else ( alpha::read(mem, idC(idp2, fxs), fld) )
        )
        \heuristics(simplify_enlarging)
    };

    // Helpers
    cons1Def {
        \find(cons1(x))
        \replacewith(cons(x, nil))
        \heuristics(concrete)
    };

    cons2Def {
        \find(cons2(x, y))
        \replacewith(cons(x, cons(y, nil)))
        \heuristics(concrete)
    };

    cons3Def {
        \find(cons3(x, y, z))
        \replacewith(cons(x, cons(y, cons(z, nil))))
        \heuristics(concrete)
    };

}