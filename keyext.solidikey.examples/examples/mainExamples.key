\include "./commonRules.key";

\functions {
    \unique Field f1;
    \unique Field f2;
    \unique Field f3;
    \unique IdentityPrim idp1;
    \unique IdentityPrim idp2;
    \unique Identity id1;
    \unique Identity id2;
}

\programVariables {
    Memory mem;
    Struct st;
    List s, flds, flds12;
    alpha v;
    Struct cSt;
}

\rules {
    fldsExDef {
        \find(flds12)
        \replacewith(cons(f1, cons(f2, mt)))
        \heuristics(concrete)
    };

    primitiveF1 {
        \find(isPrimitive(f1))
        \replacewith(true)
        \heuristics(concrete)
    };

    primitiveF2 {
        \find(isPrimitive(f2))
        \replacewith(true)
        \heuristics(concrete)
    };

    notPrimitiveF3 {
        \find(isPrimitive(f3))
        \replacewith(false)
        \heuristics(concrete)
    };
}

\problem {
    // true

    // int::read(write(mem, id1, f1, 0), id1, f1) = 0
    // int::read(addM(mem, idp1), idC(idp2, flds), f1) = int::read(mem, idC(idp2, flds), f1)
    // int::read(mtMem, id1, f1) = default(id1, f1)
    // int::selectSt(storeSt(st, f1, 0), f1) = 0
    // int::selectSt(storeSt(st, f1, 0), f2) = int::selectSt(st, f2)
    // int::selectSt(mtSt, f1) = alpha::defaultF(f1)
    // ! new(addM(mem, idp1), idp1)
    // new(mem, idp2) -> new(write(mem, id1, f1, 0), idp2)
    // new(mtMem, idp1)
    // save(mtSt, flds12, 0) = storeSt(mtSt, f1, storeSt(mtSt, f2, 0))
    // (int)save(mtSt, mt, 0) = 0
    // save(storeSt(mtSt, f1, 0), cons(f1, mt), 1) = storeSt(mtSt, f1, 1)
    // save(storeSt(mtSt, f2, 0), cons(f2, mt), 1) = storeSt(mtSt, f2, 1)
    // save(storeSt(mtSt, f1, storeSt(mtSt, f2, 0)), flds12, 1) = storeSt(mtSt, f1, storeSt(mtSt, f2, 1))
    // int::find(storeSt(mtSt, f1, 0), cons(f1, mt)) = 0
    // int::find(storeSt(mtSt, f1, storeSt(mtSt, f2, 0)), flds12) = 0
    // int::selectSt(save(st, cons(f1, mt), 0), f1) = 0
    // int::find(save(st, flds12, 0), flds12) = 0
    // int::readR(write(mem, id1, f1, 0), id1, cons(f1, mt)) = 0
    // int::readR(write(write(mem, id2, f2, 0), id1, f1, id2), id1, flds12) = 0
    // int::find(copyMem(st, write(write(mem, id2, f2, 0), id1, f1, id2), id1), flds12) = 0
    // int::read(copySt(mem, idp1, mtSt), idC(idp2, mt), f1) = int::read(mem, idC(idp2, mt), f1)
    // int::read(copySt(mem, idp1, storeSt(mtSt, f1, 1)), idC(idp1, mt), f1) = 1
    // Identity::read(copySt(mem, idp1, storeSt(mtSt, f1, 1)), idC(idp1, mt), f3) = idC(idp1, cons(f3, mt))
    idC(idp1, flds12) != idC(idp1, cons(f2, cons(f1, mt)))
    // int::head(cons(0, mt)) = 0
}