\include "./commonRules.key";

\programVariables {
    Memory mem;
    Struct st;
    Identity id1, id2;
    IdentityPrim idp1, idp2;
    Seq flds, flds12;
    Field f1, f2, f3;
    Seq s;
    alpha v;
    Struct cSt;
}

\rules {
    fldsExDef {
        \find(flds12)
        \replacewith(seqConcat(seqSingleton(f1), seqSingleton(f2)))
        \heuristics(concrete)
    };
}

\problem {
    f1 != f2 & idp1 != idp2 & isPrimitive(f1) & isPrimitive(f2) & !isPrimitive(f3) ->
    //true

    // int::read(write(mem, id1, f1, 0), id1, f1) = 0
    // idp1 != idp2 -> int::read(addM(mem, idp1), idC(idp2, flds), f1) = int::read(mem, idC(idp2, flds), f1)
    // int::read(mtMem, id1, f1) = default(id1, f1)
    // int::selectSt(storeSt(st, f1, 0), f1) = 0
    // f1 != f2 -> int::selectSt(storeSt(st, f1, 0), f2) = int::selectSt(st, f2)
    // int::selectSt(mtSt, f1) = alpha::defaultF(f1)
    // ! new(addM(mem, idp1), idp1)
    // new(mem, idp2) -> new(write(mem, id1, f1, 0), idp2)
    // new(mtMem, idp1)
    // save(mtSt, flds, 0) = storeSt(mtSt, f1, storeSt(mtSt, f1, 0))
    // (int)save(mtSt, seqEmpty, 0) = 0
    // save(storeSt(mtSt, f1, 0), seqSingleton(f1), 1) = storeSt(mtSt, f1, 1)
    // save(storeSt(mtSt, f2, 0), seqSub(seqConcat(seqSingleton(f1), seqSingleton(f2)), 1, 2), 1) = storeSt(mtSt, f2, 1)
    // save(storeSt(mtSt, f1, storeSt(mtSt, f2, 0)), flds, 1) = storeSt(mtSt, f1, storeSt(mtSt, f2, 1))
    // int::find(storeSt(mtSt, f1, 0), seqSingleton(f1)) = 0
    // int::find(storeSt(mtSt, f1, storeSt(mtSt, f2, 0)), flds) = 0
    // int::selectSt(save(st, seqSingleton(f1), 0), f1) = 0
    // int::find(save(st, flds, 0), flds) = 0
    // int::readR(write(mem, id1, f1, 0), id1, seqSingleton(f1)) = 0
    // int::readR(write(write(mem, id2, f2, 0), id1, f1, id2), id1, flds12) = 0
    // int::find(copyMem(st, write(write(mem, id2, f2, 0), id1, f1, id2), id1), flds12) = 0
    // int::read(copySt(mem, idp1, mtSt), idC(idp2, seqEmpty), f1) = int::read(mem, idC(idp2, seqEmpty), f1)
    // int::read(copySt(mem, idp1, storeSt(mtSt, f1, 1)), idC(idp1, seqEmpty), f1) = 1
    Identity::read(copySt(mem, idp1, storeSt(mtSt, f1, 1)), idC(idp1, seqEmpty), f3) = idC(idp1, seqSingleton(f3))
    // seqConcat(seqSingleton(1), seqSingleton(2)) != seqConcat(seqSingleton(2), seqSingleton(1))
}

